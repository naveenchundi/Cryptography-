#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Function to prepare the key matrix
void prepareKeyMatrix(char keyMatrix[5][5], char *key) {
    int i, j, k = 0;
    int alphabet[26] = {0};

    // Fill the key matrix with the keyword
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (key[k] != '\0') {
                if (key[k] == 'J') key[k] = 'I'; // Handling I and J as the same letter
                if (!alphabet[key[k] - 'A']) {
                    keyMatrix[i][j] = key[k];
                    alphabet[key[k] - 'A'] = 1;
                } else {
                    j--; // If letter is already used, go back one column
                }
                k++;
            }
        }
    }

    // Fill the remaining matrix with the remaining alphabet letters
    for (char ch = 'A'; ch <= 'Z'; ch++) {
        if (ch == 'J') continue; // Skip 'J' since it's handled as 'I'
        if (!alphabet[ch - 'A']) {
            for (i = 0; i < 5; i++) {
                for (j = 0; j < 5; j++) {
                    if (keyMatrix[i][j] == '\0') {
                        keyMatrix[i][j] = ch;
                        alphabet[ch - 'A'] = 1;
                        break;
                    }
                }
                if (alphabet[ch - 'A']) break;
            }
        }
    }
}

// Function to normalize the plaintext for encryption
void normalizePlainText(char *plaintext) {
    int len = strlen(plaintext);
    for (int i = 0; i < len; i++) {
        if (plaintext[i] == 'J') plaintext[i] = 'I'; // Handling I and J as the same letter
        if (!isalpha(plaintext[i])) {
            for (int j = i; j < len; j++) {
                plaintext[j] = plaintext[j + 1];
            }
            len--;
            i--;
        }
    }

    // Insert 'X' between double letters and pad if necessary
    for (int i = 0; i < len; i += 2) {
        if (plaintext[i] == plaintext[i + 1]) {
            for (int j = len; j > i + 1; j--) {
                plaintext[j] = plaintext[j - 1];
            }
            plaintext[i + 1] = 'X';
            len++;
        }
    }

    // Pad with 'X' if the plaintext length is odd
    if (len % 2 != 0) {
        plaintext[len] = 'X';
        len++;
    }

    plaintext[len] = '\0';
}

// Function to find the position of a character in the key matrix
void findPosition(char keyMatrix[5][5], char ch, int *row, int *col) {
    if (ch == 'J') ch = 'I'; // Handling I and J as the same letter

    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (keyMatrix[i][j] == ch) {
                *row = i;
                *col = j;
                return;
            }
        }
    }
}

// Function to encrypt using Playfair cipher
void encryptPlayfair(char *plaintext, char keyMatrix[5][5]) {
    normalizePlainText(plaintext);
    int len = strlen(plaintext);

    for (int i = 0; i < len; i += 2) {
        int row1, col1, row2, col2;
        findPosition(keyMatrix, plaintext[i], &row1, &col1);
        findPosition(keyMatrix, plaintext[i + 1], &row2, &col2);

        if (row1 == row2) {
            printf("%c%c ", keyMatrix[row1][(col1 + 1) % 5], keyMatrix[row2][(col2 + 1) % 5]);
        } else if (col1 == col2) {
            printf("%c%c ", keyMatrix[(row1 + 1) % 5][col1], keyMatrix[(row2 + 1) % 5][col2]);
        } else {
            printf("%c%c ", keyMatrix[row1][col2], keyMatrix[row2][col1]);
        }
    }
    printf("\n");
}

// Example usage
int main() {
    char keyMatrix[5][5] = {{'M', 'F', 'H', 'I', 'K'},
                            {'U', 'N', 'O', 'P', 'Q'},
                            {'Z', 'V', 'W', 'X', 'Y'},
                            {'E', 'L', 'A', 'R', 'G'},
                            {'D', 'S', 'T', 'B', 'C'}};

    char plaintext[] = "Must see you over Cadogan West. Coming at once.";
    printf("Plaintext: %s\n", plaintext);

    encryptPlayfair(plaintext, keyMatrix);

    return 0;
}
